"""Represents a binary file in a space. An asset can be any file type."""
type Asset {
  contentType(locale: String): String
  contentfulMetadata: ContentfulMetadata!
  description(locale: String): String
  fileName(locale: String): String
  height(locale: String): Int
  linkedFrom(allowedLocales: [String]): AssetLinkingCollections
  size(locale: String): Int
  sys: Sys!
  title(locale: String): String
  url(locale: String, transform: ImageTransformOptions): String
  width(locale: String): Int
}

type AssetCollection {
  items: [Asset]!
  limit: Int!
  skip: Int!
  total: Int!
}

input AssetFilter {
  AND: [AssetFilter]
  OR: [AssetFilter]
  contentType: String
  contentType_contains: String
  contentType_exists: Boolean
  contentType_in: [String]
  contentType_not: String
  contentType_not_contains: String
  contentType_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  description: String
  description_contains: String
  description_exists: Boolean
  description_in: [String]
  description_not: String
  description_not_contains: String
  description_not_in: [String]
  fileName: String
  fileName_contains: String
  fileName_exists: Boolean
  fileName_in: [String]
  fileName_not: String
  fileName_not_contains: String
  fileName_not_in: [String]
  height: Int
  height_exists: Boolean
  height_gt: Int
  height_gte: Int
  height_in: [Int]
  height_lt: Int
  height_lte: Int
  height_not: Int
  height_not_in: [Int]
  size: Int
  size_exists: Boolean
  size_gt: Int
  size_gte: Int
  size_in: [Int]
  size_lt: Int
  size_lte: Int
  size_not: Int
  size_not_in: [Int]
  sys: SysFilter
  title: String
  title_contains: String
  title_exists: Boolean
  title_in: [String]
  title_not: String
  title_not_contains: String
  title_not_in: [String]
  url: String
  url_contains: String
  url_exists: Boolean
  url_in: [String]
  url_not: String
  url_not_contains: String
  url_not_in: [String]
  width: Int
  width_exists: Boolean
  width_gt: Int
  width_gte: Int
  width_in: [Int]
  width_lt: Int
  width_lte: Int
  width_not: Int
  width_not_in: [Int]
}

type AssetLinkingCollections {
  componentDuplexCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): ComponentDuplexCollection
  componentHeroBannerCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): ComponentHeroBannerCollection
  componentQuoteCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): ComponentQuoteCollection
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum AssetOrder {
  contentType_ASC
  contentType_DESC
  fileName_ASC
  fileName_DESC
  height_ASC
  height_DESC
  size_ASC
  size_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  url_ASC
  url_DESC
  width_ASC
  width_DESC
}

"""
Full-width container for displaying side-by-side image and copy, includes multiple layout options [See type definition](https://app.contentful.com/spaces/6l2051vujkx5/content_types/componentDuplex)
"""
type ComponentDuplex implements Entry {
  bodyText(locale: String): ComponentDuplexBodyText
  colorPalette(locale: String): String
  containerLayout(locale: String): Boolean
  contentfulMetadata: ContentfulMetadata!
  headline(locale: String): String
  image(locale: String, preview: Boolean): Asset
  imageStyle(locale: String): Boolean
  internalName(locale: String): String
  linkedFrom(allowedLocales: [String]): ComponentDuplexLinkingCollections
  sys: Sys!
}

type ComponentDuplexBodyText {
  json: JSON!
  links: ComponentDuplexBodyTextLinks!
}

type ComponentDuplexBodyTextAssets {
  block: [Asset]!
  hyperlink: [Asset]!
}

type ComponentDuplexBodyTextEntries {
  block: [Entry]!
  hyperlink: [Entry]!
  inline: [Entry]!
}

type ComponentDuplexBodyTextLinks {
  assets: ComponentDuplexBodyTextAssets!
  entries: ComponentDuplexBodyTextEntries!
}

type ComponentDuplexCollection {
  items: [ComponentDuplex]!
  limit: Int!
  skip: Int!
  total: Int!
}

input ComponentDuplexFilter {
  AND: [ComponentDuplexFilter]
  OR: [ComponentDuplexFilter]
  bodyText_contains: String
  bodyText_exists: Boolean
  bodyText_not_contains: String
  colorPalette: String
  colorPalette_contains: String
  colorPalette_exists: Boolean
  colorPalette_in: [String]
  colorPalette_not: String
  colorPalette_not_contains: String
  colorPalette_not_in: [String]
  containerLayout: Boolean
  containerLayout_exists: Boolean
  containerLayout_not: Boolean
  contentfulMetadata: ContentfulMetadataFilter
  headline: String
  headline_contains: String
  headline_exists: Boolean
  headline_in: [String]
  headline_not: String
  headline_not_contains: String
  headline_not_in: [String]
  imageStyle: Boolean
  imageStyle_exists: Boolean
  imageStyle_not: Boolean
  image_exists: Boolean
  internalName: String
  internalName_contains: String
  internalName_exists: Boolean
  internalName_in: [String]
  internalName_not: String
  internalName_not_contains: String
  internalName_not_in: [String]
  sys: SysFilter
}

type ComponentDuplexLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  pageCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): PageCollection
}

enum ComponentDuplexOrder {
  colorPalette_ASC
  colorPalette_DESC
  containerLayout_ASC
  containerLayout_DESC
  headline_ASC
  headline_DESC
  imageStyle_ASC
  imageStyle_DESC
  internalName_ASC
  internalName_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
Full-width container for displaying images and snappy copy; can include an optional CTA [See type definition](https://app.contentful.com/spaces/6l2051vujkx5/content_types/componentHeroBanner)
"""
type ComponentHeroBanner implements Entry {
  bodyText(locale: String): ComponentHeroBannerBodyText
  colorPalette(locale: String): String
  contentfulMetadata: ContentfulMetadata!
  headline(locale: String): String
  heroSize(locale: String): Boolean
  image(locale: String, preview: Boolean): Asset
  imageStyle(locale: String): Boolean
  internalName(locale: String): String
  linkedFrom(allowedLocales: [String]): ComponentHeroBannerLinkingCollections
  sys: Sys!
}

type ComponentHeroBannerBodyText {
  json: JSON!
  links: ComponentHeroBannerBodyTextLinks!
}

type ComponentHeroBannerBodyTextAssets {
  block: [Asset]!
  hyperlink: [Asset]!
}

type ComponentHeroBannerBodyTextEntries {
  block: [Entry]!
  hyperlink: [Entry]!
  inline: [Entry]!
}

type ComponentHeroBannerBodyTextLinks {
  assets: ComponentHeroBannerBodyTextAssets!
  entries: ComponentHeroBannerBodyTextEntries!
}

type ComponentHeroBannerCollection {
  items: [ComponentHeroBanner]!
  limit: Int!
  skip: Int!
  total: Int!
}

input ComponentHeroBannerFilter {
  AND: [ComponentHeroBannerFilter]
  OR: [ComponentHeroBannerFilter]
  bodyText_contains: String
  bodyText_exists: Boolean
  bodyText_not_contains: String
  colorPalette: String
  colorPalette_contains: String
  colorPalette_exists: Boolean
  colorPalette_in: [String]
  colorPalette_not: String
  colorPalette_not_contains: String
  colorPalette_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  headline: String
  headline_contains: String
  headline_exists: Boolean
  headline_in: [String]
  headline_not: String
  headline_not_contains: String
  headline_not_in: [String]
  heroSize: Boolean
  heroSize_exists: Boolean
  heroSize_not: Boolean
  imageStyle: Boolean
  imageStyle_exists: Boolean
  imageStyle_not: Boolean
  image_exists: Boolean
  internalName: String
  internalName_contains: String
  internalName_exists: Boolean
  internalName_in: [String]
  internalName_not: String
  internalName_not_contains: String
  internalName_not_in: [String]
  sys: SysFilter
}

type ComponentHeroBannerLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  pageCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): PageCollection
}

enum ComponentHeroBannerOrder {
  colorPalette_ASC
  colorPalette_DESC
  headline_ASC
  headline_DESC
  heroSize_ASC
  heroSize_DESC
  imageStyle_ASC
  imageStyle_DESC
  internalName_ASC
  internalName_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
Full-width component for quotes, reviews and testimonials, includes multiple layout options [See type definition](https://app.contentful.com/spaces/6l2051vujkx5/content_types/componentQuote)
"""
type ComponentQuote implements Entry {
  colorPalette(locale: String): String
  contentfulMetadata: ContentfulMetadata!
  image(locale: String, preview: Boolean): Asset
  imagePosition(locale: String): Boolean
  internalName(locale: String): String
  linkedFrom(allowedLocales: [String]): ComponentQuoteLinkingCollections
  quote(locale: String): ComponentQuoteQuote
  quoteAlignment(locale: String): Boolean
  sys: Sys!
}

type ComponentQuoteCollection {
  items: [ComponentQuote]!
  limit: Int!
  skip: Int!
  total: Int!
}

input ComponentQuoteFilter {
  AND: [ComponentQuoteFilter]
  OR: [ComponentQuoteFilter]
  colorPalette: String
  colorPalette_contains: String
  colorPalette_exists: Boolean
  colorPalette_in: [String]
  colorPalette_not: String
  colorPalette_not_contains: String
  colorPalette_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  imagePosition: Boolean
  imagePosition_exists: Boolean
  imagePosition_not: Boolean
  image_exists: Boolean
  internalName: String
  internalName_contains: String
  internalName_exists: Boolean
  internalName_in: [String]
  internalName_not: String
  internalName_not_contains: String
  internalName_not_in: [String]
  quoteAlignment: Boolean
  quoteAlignment_exists: Boolean
  quoteAlignment_not: Boolean
  quote_contains: String
  quote_exists: Boolean
  quote_not_contains: String
  sys: SysFilter
}

type ComponentQuoteLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  pageCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): PageCollection
}

enum ComponentQuoteOrder {
  colorPalette_ASC
  colorPalette_DESC
  imagePosition_ASC
  imagePosition_DESC
  internalName_ASC
  internalName_DESC
  quoteAlignment_ASC
  quoteAlignment_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type ComponentQuoteQuote {
  json: JSON!
  links: ComponentQuoteQuoteLinks!
}

type ComponentQuoteQuoteAssets {
  block: [Asset]!
  hyperlink: [Asset]!
}

type ComponentQuoteQuoteEntries {
  block: [Entry]!
  hyperlink: [Entry]!
  inline: [Entry]!
}

type ComponentQuoteQuoteLinks {
  assets: ComponentQuoteQuoteAssets!
  entries: ComponentQuoteQuoteEntries!
}

type ContentfulMetadata {
  tags: [ContentfulTag]!
}

input ContentfulMetadataFilter {
  tags: ContentfulMetadataTagsFilter
  tags_exists: Boolean
}

input ContentfulMetadataTagsFilter {
  id_contains_all: [String]
  id_contains_none: [String]
  id_contains_some: [String]
}

"""
Represents a tag entity for finding and organizing content easily.
    Find out more here: https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/content-tags
"""
type ContentfulTag {
  id: String
  name: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z,
    compliant with the 'date-time' format outlined in section 5.6 of
    the RFC 3339 profile of the ISO 8601 standard for representation
    of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`.
"""
scalar Dimension

interface Entry {
  contentfulMetadata: ContentfulMetadata!
  sys: Sys!
}

type EntryCollection {
  items: [Entry]!
  limit: Int!
  skip: Int!
  total: Int!
}

input EntryFilter {
  AND: [EntryFilter]
  OR: [EntryFilter]
  contentfulMetadata: ContentfulMetadataFilter
  sys: SysFilter
}

enum EntryOrder {
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
Navigation content type used for powering the Footer menu [See type definition](https://app.contentful.com/spaces/6l2051vujkx5/content_types/footerMenu)
"""
type FooterMenu implements Entry {
  contentfulMetadata: ContentfulMetadata!
  facebookLink(locale: String): String
  instagramLink(locale: String): String
  internalName(locale: String): String
  linkedFrom(allowedLocales: [String]): FooterMenuLinkingCollections
  linkedinLink(locale: String): String
  sys: Sys!
  twitterLink(locale: String): String
}

type FooterMenuCollection {
  items: [FooterMenu]!
  limit: Int!
  skip: Int!
  total: Int!
}

input FooterMenuFilter {
  AND: [FooterMenuFilter]
  OR: [FooterMenuFilter]
  contentfulMetadata: ContentfulMetadataFilter
  facebookLink: String
  facebookLink_contains: String
  facebookLink_exists: Boolean
  facebookLink_in: [String]
  facebookLink_not: String
  facebookLink_not_contains: String
  facebookLink_not_in: [String]
  instagramLink: String
  instagramLink_contains: String
  instagramLink_exists: Boolean
  instagramLink_in: [String]
  instagramLink_not: String
  instagramLink_not_contains: String
  instagramLink_not_in: [String]
  internalName: String
  internalName_contains: String
  internalName_exists: Boolean
  internalName_in: [String]
  internalName_not: String
  internalName_not_contains: String
  internalName_not_in: [String]
  linkedinLink: String
  linkedinLink_contains: String
  linkedinLink_exists: Boolean
  linkedinLink_in: [String]
  linkedinLink_not: String
  linkedinLink_not_contains: String
  linkedinLink_not_in: [String]
  sys: SysFilter
  twitterLink: String
  twitterLink_contains: String
  twitterLink_exists: Boolean
  twitterLink_in: [String]
  twitterLink_not: String
  twitterLink_not_contains: String
  twitterLink_not_in: [String]
}

type FooterMenuLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum FooterMenuOrder {
  facebookLink_ASC
  facebookLink_DESC
  instagramLink_ASC
  instagramLink_DESC
  internalName_ASC
  internalName_DESC
  linkedinLink_ASC
  linkedinLink_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  twitterLink_ASC
  twitterLink_DESC
}

"""The 'HexColor' type represents color in `rgb:ffffff` string format."""
scalar HexColor

enum ImageFormat {
  AVIF

  """JPG image format."""
  JPG

  """
  Progressive JPG format stores multiple passes of an image in progressively higher detail.
          When a progressive image is loading, the viewer will first see a lower quality pixelated version which
          will gradually improve in detail, until the image is fully downloaded. This is to display an image as
          early as possible to make the layout look as designed.
  """
  JPG_PROGRESSIVE

  """PNG image format"""
  PNG

  """
  8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
          The 8-bit PNG format is mostly used for simple images, such as icons or logos.
  """
  PNG8

  """WebP image format."""
  WEBP
}

enum ImageResizeFocus {
  """Focus the resizing on the bottom."""
  BOTTOM

  """Focus the resizing on the bottom left."""
  BOTTOM_LEFT

  """Focus the resizing on the bottom right."""
  BOTTOM_RIGHT

  """Focus the resizing on the center."""
  CENTER

  """Focus the resizing on the largest face."""
  FACE

  """Focus the resizing on the area containing all the faces."""
  FACES

  """Focus the resizing on the left."""
  LEFT

  """Focus the resizing on the right."""
  RIGHT

  """Focus the resizing on the top."""
  TOP

  """Focus the resizing on the top left."""
  TOP_LEFT

  """Focus the resizing on the top right."""
  TOP_RIGHT
}

enum ImageResizeStrategy {
  """
  Crops a part of the original image to fit into the specified dimensions.
  """
  CROP

  """
  Resizes the image to the specified dimensions, cropping the image if needed.
  """
  FILL

  """Resizes the image to fit into the specified dimensions."""
  FIT

  """
  Resizes the image to the specified dimensions, padding the image if needed.
          Uses desired background color as padding color.
  """
  PAD

  """
  Resizes the image to the specified dimensions, changing the original aspect ratio if needed.
  """
  SCALE

  """Creates a thumbnail from the image."""
  THUMB
}

input ImageTransformOptions {
  """
  Desired background color, used with corner radius or `PAD` resize strategy.
          Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
  """
  backgroundColor: HexColor

  """
  Desired corner radius in pixels.
          Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
          Defaults to `0`. Uses desired background color as padding color,
          unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
  """
  cornerRadius: Int

  """Desired image format. Defaults to the original image format."""
  format: ImageFormat

  """Desired height in pixels. Defaults to the original image height."""
  height: Dimension

  """
  Desired quality of the image in percents.
          Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
  """
  quality: Quality

  """Desired resize focus area. Defaults to `CENTER`."""
  resizeFocus: ImageResizeFocus

  """Desired resize strategy. Defaults to `FIT`."""
  resizeStrategy: ImageResizeStrategy

  """Desired width in pixels. Defaults to the original image width."""
  width: Dimension
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
Container that enables editors to publish a page, define its slug, select & arrange its content [See type definition](https://app.contentful.com/spaces/6l2051vujkx5/content_types/page)
"""
type Page implements Entry {
  contentfulMetadata: ContentfulMetadata!
  internalName(locale: String): String
  linkedFrom(allowedLocales: [String]): PageLinkingCollections
  pageName(locale: String): String
  sys: Sys!
  topSectionCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): PageTopSectionCollection
}

type PageCollection {
  items: [Page]!
  limit: Int!
  skip: Int!
  total: Int!
}

input PageFilter {
  AND: [PageFilter]
  OR: [PageFilter]
  contentfulMetadata: ContentfulMetadataFilter
  internalName: String
  internalName_contains: String
  internalName_exists: Boolean
  internalName_in: [String]
  internalName_not: String
  internalName_not_contains: String
  internalName_not_in: [String]
  pageName: String
  pageName_contains: String
  pageName_exists: Boolean
  pageName_in: [String]
  pageName_not: String
  pageName_not_contains: String
  pageName_not_in: [String]
  sys: SysFilter
  topSectionCollection_exists: Boolean
}

type PageLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum PageOrder {
  internalName_ASC
  internalName_DESC
  pageName_ASC
  pageName_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type PageTopSectionCollection {
  items: [PageTopSectionItem]!
  limit: Int!
  skip: Int!
  total: Int!
}

union PageTopSectionItem = ComponentDuplex | ComponentHeroBanner | ComponentQuote

"""
The 'Quality' type represents quality as whole numeric values between `1` and `100`.
"""
scalar Quality

type Query {
  asset(id: String!, locale: String, preview: Boolean): Asset
  assetCollection(limit: Int = 100, locale: String, order: [AssetOrder], preview: Boolean, skip: Int = 0, where: AssetFilter): AssetCollection
  componentDuplex(id: String!, locale: String, preview: Boolean): ComponentDuplex
  componentDuplexCollection(limit: Int = 100, locale: String, order: [ComponentDuplexOrder], preview: Boolean, skip: Int = 0, where: ComponentDuplexFilter): ComponentDuplexCollection
  componentHeroBanner(id: String!, locale: String, preview: Boolean): ComponentHeroBanner
  componentHeroBannerCollection(limit: Int = 100, locale: String, order: [ComponentHeroBannerOrder], preview: Boolean, skip: Int = 0, where: ComponentHeroBannerFilter): ComponentHeroBannerCollection
  componentQuote(id: String!, locale: String, preview: Boolean): ComponentQuote
  componentQuoteCollection(limit: Int = 100, locale: String, order: [ComponentQuoteOrder], preview: Boolean, skip: Int = 0, where: ComponentQuoteFilter): ComponentQuoteCollection
  entryCollection(limit: Int = 100, locale: String, order: [EntryOrder], preview: Boolean, skip: Int = 0, where: EntryFilter): EntryCollection
  footerMenu(id: String!, locale: String, preview: Boolean): FooterMenu
  footerMenuCollection(limit: Int = 100, locale: String, order: [FooterMenuOrder], preview: Boolean, skip: Int = 0, where: FooterMenuFilter): FooterMenuCollection
  page(id: String!, locale: String, preview: Boolean): Page
  pageCollection(limit: Int = 100, locale: String, order: [PageOrder], preview: Boolean, skip: Int = 0, where: PageFilter): PageCollection
}

type Sys {
  environmentId: String!
  firstPublishedAt: DateTime
  id: String!
  publishedAt: DateTime
  publishedVersion: Int
  spaceId: String!
}

input SysFilter {
  firstPublishedAt: DateTime
  firstPublishedAt_exists: Boolean
  firstPublishedAt_gt: DateTime
  firstPublishedAt_gte: DateTime
  firstPublishedAt_in: [DateTime]
  firstPublishedAt_lt: DateTime
  firstPublishedAt_lte: DateTime
  firstPublishedAt_not: DateTime
  firstPublishedAt_not_in: [DateTime]
  id: String
  id_contains: String
  id_exists: Boolean
  id_in: [String]
  id_not: String
  id_not_contains: String
  id_not_in: [String]
  publishedAt: DateTime
  publishedAt_exists: Boolean
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  publishedAt_in: [DateTime]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_not: DateTime
  publishedAt_not_in: [DateTime]
  publishedVersion: Float
  publishedVersion_exists: Boolean
  publishedVersion_gt: Float
  publishedVersion_gte: Float
  publishedVersion_in: [Float]
  publishedVersion_lt: Float
  publishedVersion_lte: Float
  publishedVersion_not: Float
  publishedVersion_not_in: [Float]
}